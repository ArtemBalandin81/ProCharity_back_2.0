from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from src.bot import constants as bot_constants
from src.core.services.user import UserService


async def start_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    user_service = UserService()
    await user_service.register_user(
        telegram_id=update.effective_chat.id,
        username=update.effective_chat.username,
    )
    callback_data = bot_constants.COMMAND__GREETING
    button = [[InlineKeyboardButton(text="–ù–∞—á–Ω—ë–º", callback_data=callback_data)]]
    keyboard = InlineKeyboardMarkup(button)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! üëã \n\n"
        '–Ø –±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ <a href="https://procharity.ru/">ProCharity</a>. '
        "–ë—É–¥—É –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ–º–æ–≥—É "
        "–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )
    return bot_constants.GREETING


async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Create button menu."""
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="view_tasks")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", callback_data="change_category")],
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–æ—à–∏–±–∫—É", callback_data="send_error_or_proposal")],
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_your_question")],
        [InlineKeyboardButton("–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", callback_data="about_project")],
        [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å / ‚ñ∂Ô∏è –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è", callback_data="job_subscription")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=reply_markup)


async def send_callback_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:  # TODO delete this
    """Parse the CallbackQuery and update the message text."""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(text=f"Selected option: {query.data}")
