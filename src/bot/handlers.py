from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from src.bot.services.category import CategoryService

from src.bot import constants as bot_constants
from src.core.services.user import UserService


async def start_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    user_service = UserService()
    await user_service.register_user(
        telegram_id=update.effective_chat.id,
        username=update.effective_chat.username,
    )
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text="–ù–∞—á–Ω—ë–º",
                    callback_data=bot_constants.COMMAND__GREETING,
                )
            ]
        ]
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! üëã \n\n"
        '–Ø –±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ <a href="https://procharity.ru/">ProCharity</a>. '
        "–ë—É–¥—É –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –ø–æ–º–æ–≥—É "
        "–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )
    return bot_constants.GREETING


async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Create button menu."""
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="view_tasks")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", callback_data="change_category")],
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–æ—à–∏–±–∫—É", callback_data="send_error_or_proposal")],
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_your_question")],
        [InlineKeyboardButton("–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", callback_data="about_project")],
        [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å / ‚ñ∂Ô∏è –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è", callback_data="job_subscription")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=reply_markup)


async def categories_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    category_service = CategoryService()
    categories = await category_service.get_unarchived_parents()

    categories_buttons = [
        [InlineKeyboardButton(category.name, callback_data=f"category_{category.id}")] for category in categories]
    keyboard.extend(categories_buttons)

    keyboard.extend([
        [InlineKeyboardButton(
            "–ù–µ—Ç –º–æ–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π üòï",
            callback_data="add_categories"
        )],
        [InlineKeyboardButton(
            "–ì–æ—Ç–æ–≤–æ üëå",
            callback_data="confirm_categories"
        )]])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å, "
        "–≤—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å "
        "–Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏ –Ω–∞ –ø—É–Ω–∫—Ç \"–ì–æ—Ç–æ–≤–æ üëå\"",
        reply_markup=reply_markup
    )


async def subcategories_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    category_service = CategoryService()
    parent_id = int(update.callback_query.data.split('_')[1])
    subcategories = await category_service.get_unarchived_subcategories(parent_id)

    categories_buttons = [
        [InlineKeyboardButton(category.name, callback_data=f'category_{parent_id}')] for category in subcategories]
    keyboard.extend(categories_buttons)

    keyboard.append(
        [InlineKeyboardButton(
            "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è",
            callback_data="change_category"
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        reply_markup=reply_markup
    )
