from urllib.parse import urljoin

from dependency_injector.wiring import Provide
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

from src.api.schemas import FeedbackFormQueryParams
from src.bot.constants import callback_data, enum
from src.core.db.models import Category, User
from src.core.depends import Container
from src.settings import settings

VIEW_TASKS_BUTTON = [InlineKeyboardButton("üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=callback_data.VIEW_TASKS)]
CHANGE_CATEGORY_BUTTON = [InlineKeyboardButton("üéì –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", callback_data=callback_data.CHANGE_CATEGORY)]
ABOUT_PROJECT_BUTTON = [InlineKeyboardButton("‚ÑπÔ∏è –û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", callback_data=callback_data.ABOUT_PROJECT)]
UNSUBSCRIBE_BUTTON = [
    InlineKeyboardButton("‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏—è", callback_data=callback_data.JOB_SUBSCRIPTION)
]
SUBSCRIBE_BUTTON = [InlineKeyboardButton("‚ñ∂Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è", callback_data=callback_data.JOB_SUBSCRIPTION)]
PERSONAL_ACCOUNT_BUTTON = [
    InlineKeyboardButton("üö™ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url="https://procharity.ru/volunteers/settings/")
]


def get_support_service_button(user: User) -> list[InlineKeyboardButton]:
    return [InlineKeyboardButton("‚úç –ù–∞–ø–∏—Å–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏", web_app=get_feedback_web_app_info(user))]


async def get_checked_categories_keyboard(
    categories: dict[str, int, int], selected_categories: dict[Category] = {}
) -> InlineKeyboardButton:
    keyboard = []

    for category_name, category_id, category_children_count in categories:
        if category_id in selected_categories:
            if category_children_count == len(selected_categories[category_id]):
                button = InlineKeyboardButton(f"‚úÖ {category_name}", callback_data=f"category_{category_id}")
            else:
                button = InlineKeyboardButton(f"‚òëÔ∏è  {category_name}", callback_data=f"category_{category_id}")
        else:
            button = InlineKeyboardButton(category_name, callback_data=f"category_{category_id}")
        keyboard.append([button])

    keyboard.extend(
        [
            [InlineKeyboardButton("–ù–µ—Ç –º–æ–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π üòï", callback_data=callback_data.ADD_CATEGORIES)],
            [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ üëå", callback_data=callback_data.CONFIRM_CATEGORIES)],
        ]
    )
    return InlineKeyboardMarkup(keyboard)


async def get_subcategories_keyboard(
    parent_id: int, subcategories: list[Category], selected_categories: dict[Category] = {}
) -> InlineKeyboardMarkup:
    keyboard = []

    for category in subcategories:
        if category.id not in selected_categories:
            button = InlineKeyboardButton(category.name, callback_data=f"select_category_{category.id}")
        else:
            button = InlineKeyboardButton(f"‚úÖ {category.name}", callback_data=f"select_category_{category.id}")
        keyboard.append([button])

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=f"back_to_{parent_id}")])
    return InlineKeyboardMarkup(keyboard)


async def get_menu_keyboard(user: User) -> InlineKeyboardMarkup:
    keyboard = [
        VIEW_TASKS_BUTTON,
        get_support_service_button(user),
        UNSUBSCRIBE_BUTTON if user.has_mailing else SUBSCRIBE_BUTTON,
        CHANGE_CATEGORY_BUTTON,
        PERSONAL_ACCOUNT_BUTTON,
    ]
    return InlineKeyboardMarkup(keyboard)


def get_feedback_web_app_info(user: User) -> WebAppInfo:
    if hasattr(user, "email"):
        email = user.email
    else:
        email = None
    return WebAppInfo(
        url=urljoin(
            settings.feedback_form_template_url,
            FeedbackFormQueryParams(name=user.first_name, surname=user.last_name, email=email).as_url_query(),
        )
    )


async def get_back_menu() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data=callback_data.MENU)]]
    return InlineKeyboardMarkup(keyboard)


async def get_start_keyboard(
    callback_data_on_start: str,
    url_for_connection: str,
    procharity_url: str = Provide[Container.settings.provided.PROCHARITY_URL],
) -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("–ù–∞—á–Ω—ë–º", callback_data=callback_data_on_start)],
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç ProCharity", url=procharity_url)],
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –±–æ—Ç–æ–º", url=url_for_connection)],
    ]
    return InlineKeyboardMarkup(keyboard)


async def get_open_tasks_and_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏", callback_data=callback_data.VIEW_TASKS)],
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data=callback_data.MENU)],
    ]
    return InlineKeyboardMarkup(keyboard)


async def view_more_tasks_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –∑–∞–¥–∞–Ω–∏—è", callback_data=callback_data.VIEW_TASKS)],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data=callback_data.MENU)],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_confirm_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data=callback_data.CONFIRM_CATEGORIES)],
        [InlineKeyboardButton("–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=callback_data.CHANGE_CATEGORY)],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_no_mailing_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—á—Ç—É"""
    keyboard = [[InlineKeyboardButton(reason, callback_data=f"reason_{reason.name}")] for reason in enum.REASONS]
    return InlineKeyboardMarkup(keyboard)
